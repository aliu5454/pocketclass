import React, { useEffect, useRef, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
// components
import Header from "../components/Header";
// firebase
import { auth, db } from "../firebaseConfig";
import { doc, getDoc } from "firebase/firestore";
import { useAuthState } from "react-firebase-hooks/auth";
// moment
import moment from "moment/moment";
import MediaDisplay from "../components/MediaDisplay";
// utils
import cutString from "../utils/string";

const Chat = () => {
	const router = useRouter();
	const [isLoading, setIsLoading] = useState(false);

	// data
	const { nid } = router.query;
	const [user] = useAuthState(auth);

	// notification
	const [notification, setNotification] = useState(null);
	const heading = !!notification && cutString(notification?.heading, "class");

	/**
	 * UTILITY FUNCTIONS
	 */

	// redirect to main page
	const goToMainPage = () => router.push("/");

	/**
	 * DATA FUNCTIONS
	 */

	// get data (student/instructor/class/chatroom)
	const getData = async (xid, xcol) => {
		const docRef = doc(db, xcol, xid);
		const data = await getDoc(docRef);
		return data?.data();
	};

	// get all data
	useEffect(() => {
		const getAllData = async () => {
			try {
				setIsLoading(true);

				const notifTemp = await getData(nid, "notifications");
				setNotification(notifTemp);

				setIsLoading(false);
			} catch (error) {
				setIsLoading(false);
				console.warn(error);
			}
		};

		if (nid) getAllData();
	}, [nid]);

	// check ids
	useEffect(() => {
		if (
			(router.isReady && !nid) ||
			(!!notification && notification?.user !== user?.uid)
		)
			goToMainPage();
	}, [nid, router.isReady, notification, user]);

	return isLoading || !nid || !user?.uid || notification?.user !== user?.uid ? (
		<section className="flex justify-center items-center min-h-[100vh]">
			<Image src="/Rolling-1s-200px.svg" width={"60px"} height={"60px"} />
		</section>
	) : (
		<div className="myClassesContainer mx-auto h-screen flex flex-col">
			{/* head */}
			<Head>
				<title>notification</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/pc_favicon.ico" />
			</Head>

			{/* header */}
			<Header />

			{/* message container */}
			<div className="flex-1 flex w-full items-center justify-center bg-slate-50">
				<div className="border-2 p-5 rounded-xl">
					<div
						className="text-2xl mb-12"
						dangerouslySetInnerHTML={{
							__html: `New message in class ${heading}`,
						}}
					/>
					<div className={`my-2 cursor-default max-w-[500px] mx-auto`}>
						<div
							className={`text-lg w-fit px-5 py-2 rounded-3xl hover:opacity-80 rounded-bl-none bg-gray-300 text-gray-700`}
						>
							{!!notification?.media && (
								<div className="max-w-xs max-h-xs md:max-w-sm md:max-h-sm overflow-hidden px-1 py-3">
									<MediaDisplay
										link={notification?.media}
										type={notification?.mediaType}
										isnotification={true}
										isMynotification={false}
									/>
								</div>
							)}

							<h1 className="text-2xl">{notification?.text ?? ""}</h1>
						</div>

						<h1 className={`text-sm text-gray-400 flex`}>
							<span className="font-bold">&nbsp;</span>
							<span>
								{moment(notification?.createdAt?.toDate?.())?.format?.(
									"DD-MM-YY / hh:mm"
								)}
							</span>
						</h1>
					</div>
				</div>
			</div>
		</div>
	);
};
export default Chat;
