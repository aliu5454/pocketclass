import Head from "next/head";
import Image from "next/image";
import Footer from "../../components/Footer";

import { Router, useRouter } from "next/router";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth, db } from "../../firebaseConfig";
import { useState } from "react";
import { doc, getDoc } from "firebase/firestore";
import { useEffect } from "react";
import { Navigation, Pagination } from "swiper";
import { Swiper, SwiperSlide } from "swiper/react";

import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import NewHeader from "../../components/NewHeader";

// Hero Icons imports
import {
  PencilIcon,
  PhoneIcon,
  UserIcon,
  CakeIcon,
  UserGroupIcon,
  DocumentTextIcon,
  TagIcon,
} from "@heroicons/react/solid";
import VideoPlayer from "../../components/VideoPlayer";

export default function Profile() {
  const [user, loading, error] = useAuthState(auth);
  const [userData, setUserData] = useState();
  const [showModal, setShowModal] = useState(false);

  const router = useRouter();

  const { id } = router.query;

  const getUserInfo = async (id) => {
    const docRef = doc(db, "Users", id);
    const data = await getDoc(docRef);
    setUserData(data.data());
    console.log(data.data());
  };

  useEffect(() => {
    if (id) {
      getUserInfo(id);
    }
  }, [id]);

  if (!userData) {
    return (
      <section className="flex justify-center items-center min-h-[100vh]">
        <Image
          priority={true}
          src="/Rolling-1s-200px.svg"
          width={"60px"}
          height={"60px"}
        />
      </section>
    );
  }

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/pc_favicon.ico" />
      </Head>
      {/* header */}
      {/* banner */}

      <div className="bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto">
          {/* Page Header */}
          <div className="mb-8">
            <h1 className="text-4xl font-bold text-gray-900">Profile</h1>
            <p className="text-gray-600 mt-2">
              View and manage your profile information. <button className="text-logo-red" onClick={() => setShowModal(true)}>Watch Guide</button>
              </p>
          </div>

          {/* Two Column Layout - Left narrower, Right wider */}
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
            {/* Left Column - Profile Card (2/5 width) */}
            <div className="lg:col-span-2 bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
              {/* Edit Button */}
              {user && user.uid === id && (
                <div className="flex justify-end mb-6">
                  <button
                    onClick={() => {
                      router.push({
                        pathname: `/updateProfile/${user.uid}`,
                      });
                    }}
                    className="text-logo-red hover:text-logo-red/80 font-medium text-sm transition-colors duration-200"
                  >
                    Edit
                  </button>
                </div>
              )}

              {/* Profile Image */}
              <div className="text-center mb-8">
                <div className="relative inline-block">
                  {userData.profileImage ? (
                    <img
                      src={userData?.profileImage}
                      referrerPolicy="no-referrer"
                      className="w-32 h-32 rounded-full object-cover border-4 border-gray-100 mx-auto"
                      alt="User Profile Image"
                    />
                  ) : (
                    <div className="w-32 h-32 rounded-full bg-logo-red flex items-center justify-center border-4 border-gray-100 mx-auto">
                      <span className="text-white text-2xl font-bold">
                        {userData.firstName
                          ? userData.firstName.charAt(0)
                          : user?.displayName?.charAt(0) || "U"}
                      </span>
                    </div>
                  )}
                  {/* Edit Icon on Image */}
                  {user && user.uid === id && (
                    <button
                      onClick={() => {
                        router.push({
                          pathname: `/updateProfile/${user.uid}`,
                        });
                      }}
                      className="absolute bottom-0 right-0 w-8 h-8 bg-white rounded-full border-2 border-gray-200 flex items-center justify-center shadow-sm"
                    >
                      <PencilIcon className="w-4 h-4 text-gray-600" />
                    </button>
                  )}
                </div>
              </div>

              {/* Name */}
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-gray-900">
                  {userData.firstName && userData.lastName
                    ? `${userData.firstName} ${userData.lastName}`
                    : user?.displayName || "User Profile"}
                </h2>
              </div>

              {/* Essential Profile Fields - Keep only core info */}
              <div className="space-y-6">
                <div className="border-b border-gray-100 pb-4">
                  <div className="text-sm font-medium text-gray-600 mb-1">
                    First name
                  </div>
                  <div className="text-base text-gray-900">
                    {userData.firstName || (
                      <span className="text-gray-400">-</span>
                    )}
                  </div>
                </div>

                <div className="border-b border-gray-100 pb-4">
                  <div className="text-sm font-medium text-gray-600 mb-1">
                    Last name
                  </div>
                  <div className="text-base text-gray-900">
                    {userData.lastName || (
                      <span className="text-gray-400">-</span>
                    )}
                  </div>
                </div>

                <div>
                  <div className="text-sm font-medium text-gray-600 mb-1">
                    Email
                  </div>
                  <div className="text-base text-gray-900 break-all">
                    {userData?.email}
                  </div>
                </div>
              </div>
            </div>

            {/* Right Column - Detailed Information (3/5 width) */}
            <div className="lg:col-span-3 bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-8">
                My Information
              </h2>

              {/* Contact Information Section */}
              <div className="mb-8">
                <div className="text-sm font-medium text-gray-600 mb-4">
                  Contact
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center mr-4">
                        <PhoneIcon className="w-5 h-5 text-gray-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium text-gray-900">Mobile</div>
                        <div className="text-sm text-gray-600">
                          {userData.phoneNumber || "Not provided"}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center mr-4">
                        <UserIcon className="w-5 h-5 text-gray-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium text-gray-900">Role</div>
                        <div className="text-sm text-gray-600">
                          {userData.category
                            ? userData.category.charAt(0).toUpperCase() +
                              userData.category.slice(1)
                            : "User"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Personal Details Section */}
              <div className="mb-8">
                <div className="text-sm font-medium text-gray-600 mb-4">
                  Personal Details
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center mr-4">
                        <CakeIcon className="w-5 h-5 text-gray-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium text-gray-900">
                          Date of Birth
                        </div>
                        <div className="text-sm text-gray-600">
                          {userData.dob || "Not provided"}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center mr-4">
                        <UserGroupIcon className="w-5 h-5 text-gray-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium text-gray-900">Gender</div>
                        <div className="text-sm text-gray-600">
                          {userData.gender || "Not specified"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Description Section */}
              <div className="mb-8">
                <div className="text-sm font-medium text-gray-600 mb-3">
                  About Me
                </div>
                <div className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                  <div className="flex items-start">
                    <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center mr-4 mt-1">
                      <DocumentTextIcon className="w-5 h-5 text-gray-600" />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-gray-900">
                        Profile Description
                      </div>
                      <div className="text-sm text-gray-600 leading-relaxed">
                        {userData.profileDescription ||
                          "No description provided yet. This is where you can tell others about yourself, your interests, and what makes you unique!"}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Display Name Section */}
              <div>
                <div className="text-sm font-medium text-gray-600 mb-3">
                  Display Settings
                </div>
                <div className="bg-gray-50 rounded-xl p-4 border border-gray-100">
                  <div className="flex items-center">
                    <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center mr-4">
                      <TagIcon className="w-5 h-5 text-gray-600" />
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-gray-900">
                        Public Display Name
                      </div>
                      <div className="text-sm text-gray-600">
                        {userData.firstName && userData.lastName
                          ? `${userData.firstName} ${userData.lastName}`
                          : user?.displayName || "Not set"}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <VideoPlayer isOpen={showModal} onClose={setShowModal} videoSrc={"/tutorials/Step1.mp4"} title={"Profile Updation Tutorial"}/>

      <Footer />
    </>
  );
}
