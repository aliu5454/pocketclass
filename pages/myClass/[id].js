import {
	collection,
	doc,
	getDoc,
	getDocs,
	onSnapshot,
	query,
	where,
  } from "firebase/firestore";
  import Head from "next/head";
  import Image from "next/image";
  import { useRouter } from "next/router";
  import React, { useEffect, useState } from "react";
  import { auth, db } from "../../firebaseConfig";
  import InfoCard from "../../components/InfoCard";
  import { useAuthState } from "react-firebase-hooks/auth";
  import { Tabs } from "antd";
import NewHeader from "../../components/NewHeader";
  
  const MyClass = () => {
	const router = useRouter();
	const [userData, setUserData] = useState();
	const [appointments, setAppointments] = useState([]);
	const [myClass, setMyClass] = useState([]);
	const [classDetails, setClassDetails] = useState({});
	const [reviews, setReviews] = useState([]);
	const [user, loading] = useAuthState(auth);

  
	const { id } = router.query;
	const [selectedStatus, setSelectedStatus] = useState("All");
  
	const getUserInfo = async (id) => {
	  const docRef = doc(db, "Users", id);
	  const data = await getDoc(docRef);
	  setUserData(data.data());
	};
  
	const getAppointments = async (userId) => {
	  const q = query(collection(db, "appointments"), where("owner", "==", userId));
	  const querySnapshot = await getDocs(q);
	  let appointmentsData = querySnapshot.docs.map((docSnap) => ({
		...docSnap.data(),
		id: docSnap.id,
	  }));
	  setAppointments(appointmentsData);
	  fetchClassDetails(appointmentsData);
	};
  
	const fetchClassDetails = async (appointments) => {
	  let classData = {};
	  await Promise.all(
		appointments.map(async (appointment) => {
		  const classDoc = await getDoc(doc(db, "classes", appointment.class));
		  if (classDoc.exists()) {
			classData[appointment.class] = { ...classDoc.data(), id: appointment.class };
		  }
		})
	  );
	  setClassDetails(classData);
	};
  
	const getClass = async (q) => {
	  const querySnapshot = await getDocs(q);
	  let temp = querySnapshot.docs.map((docSnap) => ({
		...docSnap.data(),
		id: docSnap.id,
	  }));
	  setMyClass(temp);
	};
  
	useEffect(() => {
	  if (id) getUserInfo(id);
	}, [id]);
  
	useEffect(() => {
	  if (id && userData?.category === "student") {
		getAppointments(id);
	  }
	}, [id, userData]);
  
	useEffect(() => {
	  if (id && userData?.category === "instructor") {
		const q = query(
		  collection(db, "classes"),
		  where("classCreator", "==", id)
		);
		getClass(q);
	  }
	}, [id, userData]);
  
	useEffect(() => {
	  return onSnapshot(collection(db, "Reviews"), (snapshot) => {
		setReviews(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
	  });
	}, []);
  
	const handleTabChange = (key) => {
	  setSelectedStatus(key);
	};
  
	if (!id || !userData || loading) {
	  return (
		<section className="flex justify-center items-center min-h-[100vh]">
		  <Image
			priority={true}
			src="/Rolling-1s-200px.svg"
			width={600}
			height={600}
		  />
		</section>
	  );
	}
  
	if (!user) {
	  router.push("/");
	  return null;
	}
  
	const filteredAppointments = appointments.filter((appointment) => {
	  if (selectedStatus === "Active") return appointment.status === "pending";
	  if (selectedStatus === "Completed") return appointment.status === "completed";
	  return true;
	});
  
	const filteredClasses = myClass.filter((classData) => {
	  if (selectedStatus === "Active") return classData.status === "pending";
	  if (selectedStatus === "Completed") return classData.status === "completed";
	  return true;
	});
  
	return (
	  <div className="myClassesContainer mx-auto">
		<Head>
		  <title>My Class</title>
		  <meta name="description" content="Generated by create next app" />
		  <link rel="icon" href="/pc_favicon.ico" />
		</Head>
  
		<NewHeader />
  
		<h1 className="text-center text-4xl font-bold py-[50px]">My Classes</h1>
  
		<Tabs
		  style={{ width: "80%", margin: "auto" }}
		  activeKey={selectedStatus}
		  onChange={handleTabChange}
		  className="flex justify-center mb-8"
		>
		  <Tabs.TabPane tab="All" key="All" />
		  <Tabs.TabPane tab="Active" key="Active" />
		  <Tabs.TabPane tab="Completed" key="Completed" />
		</Tabs>
		{userData?.category === "instructor" && (
		  <div className="instructorContainer max-w-[1450px] mx-auto">
			<div className="flex flex-col w-full">
			  {filteredClasses.length !== 0 ? (
				filteredClasses.map((data) => (
				  <InfoCard
					key={data.id}
					id={data.id}
					type={data.Type}
					latitude={data.latitude}
					name={data.Name}
					images={data.Images}
					description={data.Description}
					longitude={data.longitude}
					reviews={reviews}
					address={data.address}
					price={data.price}
					category={data.category}
					status={data.status}
				  />
				))
			  ) : (
				<p className="text-center text-xl w-full text-logo-red">
				  No Classes Found
				</p>
			  )}
			</div>
		  </div>
		)}
  
		{userData?.category === "student" && (
		  <div className="studentContainer max-w-[1450px] mx-auto">
			{filteredAppointments.length !== 0 ? (
			  filteredAppointments.map((appointment) => {
				const classData = classDetails[appointment.class];
				return classData ? (
				  <InfoCard
					key={appointment.id}
					id={classData.id}
					type={classData.Type}
					latitude={classData.latitude}
					name={classData.Name}
					images={classData.Images}
					description={classData.Description}
					longitude={classData.longitude}
					reviews={reviews}
					address={classData.address}
					price={appointment.price}
					category={classData.category}
					status={appointment.status} 
					start={appointment.start}
					end={appointment.end}	
				  />
				) : null;
			  })
			) : (
			  <p className="text-center text-xl w-full text-logo-red">
				No Classes Found
			  </p>
			)}
		  </div>
		)}
	  </div>
	);
  };
  
  export default MyClass;
  